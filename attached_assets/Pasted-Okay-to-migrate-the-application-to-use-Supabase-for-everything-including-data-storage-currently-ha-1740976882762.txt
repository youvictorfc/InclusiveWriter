Okay, to migrate the application to use Supabase for everything, including data storage currently handled by Drizzle ORM and the direct PostgreSQL connection, you would need to refactor the application's database interactions. Here's a plan:

1. Project Setup and Planning

Dependencies: Ensure @supabase/supabase-js is installed, which should already be the case. You likely will need to remove or adjust the drizzle and neon packages.

Environment Variables: Verify you have appropriate Supabase URL and ANON Key.

2. Define Supabase Schemas

Update shared/schema.ts: Remove Drizzle-specific imports and schema definitions. Replace with TypeScript interfaces and types that reflect the data structures you'll be working with.

Example shared/schema.ts (simplified)

export interface User {
  id: number;
  email: string;
  supabase_id: string | null;
  createdAt: string;
}

export interface Document {
  id: number;
  userId: number;
  title: string;
  content: string;
  htmlContent: string;
  analysisMode: AnalysisMode;
  analysisResult: AnalysisResult | null;
  createdAt: string;
  updatedAt: string;
}

export type AnalysisMode = 'language' | 'policy' | 'recruitment';

export type AnalysisResult = {
  issues: Array<{
    text: string;
    startIndex: number;
    endIndex: number;
    suggestion: string;
    reason: string;
    severity: 'low' | 'medium' | 'high';
  }>;
};
Use code with caution.
TypeScript
Verify/Update RLS policies to use Supabase auth

3. Refactor Server-Side Data Access (server/storage.ts)

Remove Drizzle references. Refactor functions in DatabaseStorage to use the Supabase client (supabase-js) to interact with your Supabase database instead of Drizzle ORM.

Modify the getUser, createUser, getDocuments, createDocument, updateDocument, deleteDocument, and other methods to use Supabase client.

Remove any direct SQL queries from the service and migrate it all over to supabase.
*Refactor migrations to be supabase function or use custom queries

Example of refactored server/storage.ts methods (using Supabase client):

import { supabase } from './supabase';
import type { Document, User, AnalysisResult, AnalysisMode } from '@shared/schema';

export interface IStorage {
    getDocuments(userId: string): Promise<Document[]>;
    createDocument(userId:string, title:string, content:string, htmlContent: string, analysisMode:AnalysisMode, analysisResult: AnalysisResult | null): Promise<Document>;
    getDocument(id: number): Promise<Document | null>;
    updateDocument(id: number, title?: string, content?: string, htmlContent?: string, analysisMode?: AnalysisMode, analysisResult?: AnalysisResult): Promise<Document>;
    deleteDocument(id: number): Promise<void>;
    getUser(id: number): Promise<User | null>;
  }

  class SupabaseStorage implements IStorage {
    async getDocuments(userId: string): Promise<Document[]> {
      const { data, error } = await supabase
        .from('documents')
        .select('*')
        .eq('userId', userId);

      if (error) {
        console.error('Error fetching documents:', error);
        throw new Error('Failed to fetch documents');
      }

      return data as Document[];
    }

    async createDocument(userId: string, title: string, content: string, htmlContent: string, analysisMode: AnalysisMode, analysisResult: AnalysisResult | null): Promise<Document> {
      const { data, error } = await supabase
        .from('documents')
        .insert([{ userId, title, content, htmlContent, analysisMode, analysisResult }])
        .select()
        .single();

      if (error) {
        console.error('Error creating document:', error);
        throw new Error('Failed to create document');
      }

      return data as Document;
    }

    async getDocument(id: number): Promise<Document | null> {
      const { data, error } = await supabase
        .from('documents')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        console.error('Error getting document:', error);
        throw new Error('Failed to get document');
      }

      return data as Document;
    }

    async updateDocument(id: number, title?: string, content?: string, htmlContent?: string, analysisMode?: AnalysisMode, analysisResult?: AnalysisResult): Promise<Document> {
        const updates: Record<string, any> = {};
        if (title !== undefined) updates.title = title;
        if (content !== undefined) updates.content = content;
        if (htmlContent !== undefined) updates.htmlContent = htmlContent;
        if (analysisMode !== undefined) updates.analysisMode = analysisMode;
        if (analysisResult !== undefined) updates.analysisResult = analysisResult;
        
        const { data, error } = await supabase
          .from('documents')
          .update(updates)
          .eq('id', id)
          .select()
          .single();

        if (error) {
            console.error('Error updating document:', error);
            throw new Error('Failed to update document');
        }

        return data as Document;
    }

    async deleteDocument(id: number): Promise<void> {
      const { error } = await supabase
        .from('documents')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('Error deleting document:', error);
        throw new Error('Failed to delete document');
      }
    }

    async getUser(id: number): Promise<User | null> {
        const { data, error } = await supabase
          .from('users')
          .select('*')
          .eq('id', id)
          .single();

        if (error) {
          console.error('Error getting user:', error);
          throw new Error('Failed to get user');
        }
    
        return data as User;
    }
  }
export const storage = new SupabaseStorage();
Use code with caution.
TypeScript
4. Adjust API Routes (server/routes.ts)

Update API routes to call the refactored storage methods for database operations. This ensures that all interactions with the database go through the Supabase client.

Example: API Route Update

app.post("/api/documents", async (req, res) => {
    try {
      if (!req.isAuthenticated()) {
        return res.status(401).json({ error: "Authentication required" });
      }

      const {id:userId} = req.user;

      const document = await storage.createDocument(userId.toString(), req.body.title, req.body.content, req.body.htmlContent, req.body.analysisMode, req.body.analysisResult);

      res.json(document);
    } catch (error) {
      console.error('Document creation error:', error);
      res.status(500).json({ error: 'Failed to create document' });
    }
  });
Use code with caution.
TypeScript
5. Remove Deprecated Functionality

Remove files and references to Drizzle ORM and PostgreSQL connections (migrations/*, drizzle.config.ts, server/db.ts).

6. Test Your Application

Test your authentication and authorization flows.

Test CRUD operations for documents and ensure data is being stored and retrieved correctly.

Test the application thoroughly to make sure everything is functioning as expected.

This detailed plan should enable you to migrate your NOMW application fully to Supabase for both authentication and data persistence. Remember to test thoroughly.