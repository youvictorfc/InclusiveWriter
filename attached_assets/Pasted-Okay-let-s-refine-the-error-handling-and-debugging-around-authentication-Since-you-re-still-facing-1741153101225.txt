Okay, let's refine the error handling and debugging around authentication. Since you're still facing 401 errors even after adding initial logging, it suggests the token is likely not being correctly passed or validated consistently throughout the application flow. I will now refine the process by adding code

1. Refactor Server-Side Authentication Middleware (server/auth.ts):

This revision aims to log out the user automatically upon authentication error.
This ensures to correctly handle cases of revoked or bad credentials, and to better set cookie.

import { Express, Request, Response, NextFunction } from "express";
import { createClient } from '@supabase/supabase-js';

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
  throw new Error("SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY environment variables are required");
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

declare global {
  namespace Express {
    interface Request {
      isAuthenticated(): boolean;
      user?: {
        id: number;
        email: string;
        supabase_id: string;
      };
    }
  }
}

export function setupAuth(app: Express) {
  app.use(async (req: Request, res: Response, next: NextFunction) => {
    try {
      const authHeader = req.headers.authorization;
      if (!authHeader) {
        console.log('No authorization header found');
        req.isAuthenticated = () => false;
        req.user = undefined;  // Clear any existing user object
        return next();
      }

      const token = authHeader.replace('Bearer ', '');
      console.log('Attempting to verify token...');

      const { data: { user }, error: authError } = await supabase.auth.getUser(token);

      if (authError || !user) {
        console.error('Token verification failed:', authError);
        req.isAuthenticated = () => false;
        req.user = undefined;  // Clear any existing user object
        res.clearCookie('sb-access-token'); // Clear any existing cookies (if using them)
        res.clearCookie('sb-refresh-token');
        return next();
      }

      // Fetch user data from 'users' table
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id, email, supabase_id')
        .eq('supabase_id', user.id)
        .single();

      if (userError) {
        // If user doesn't exist, create a record
        if (userError.code === 'PGRST116' || userError.message?.includes('does not exist')) {
          console.log('Creating new user record');
          const { data: newUser, error: createError } = await supabase
            .from('users')
            .insert({
              email: user.email,
              supabase_id: user.id
            })
            .select('id, email, supabase_id')
            .single();

          if (createError) {
            console.error('Failed to create user:', createError);
            req.isAuthenticated = () => false;
            req.user = undefined;
            return next();
          }

          console.log('New user created:', newUser);
          req.user = {
            id: newUser.id,
            email: newUser.email,
            supabase_id: newUser.supabase_id,
          };

          req.isAuthenticated = () => true;
          return next();
        } else {
          console.error('Failed to get user data:', userError);
          req.isAuthenticated = () => false;
          req.user = undefined;
          return next();
        }
      }

      console.log('User data retrieved:', userData);
      req.user = {
        id: userData.id,
        email: userData.email,
        supabase_id: userData.supabase_id,
      };
      req.isAuthenticated = () => true;
      next();
    } catch (error) {
      console.error('Auth middleware error:', error);
      req.isAuthenticated = () => false;
      req.user = undefined;
      next();
    }
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ error: "Not authenticated" });
    }
    res.json(req.user);
  });
}
content_copy
download
Use code with caution.
TypeScript

Here's a summary of the changes

Automatic User Creation: User creation is handled more efficiently, in auth middleware.

Explicit Token Handling: try-catch blocks with additional logging surround all Supabase API calls.

User Object Handling: Now properly stores and reads user information when creating accounts with the middleware.

Removed Unnecessary Logic In many cases, you no longer need code that relies on data not being present.

Then, ensure the auth logic is up-to-date in API.

Examine the /api/analyze Route: Double check how is the analysis data is stored.

Enforce Supabase Auth: Add the auth flow to both the server and the client.

Now, with these changes, please share the traces, messages and database info. With these, I should be able to pinpoint where the logic might have gone wrong.